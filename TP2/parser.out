Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AC
    AND
    Diff
    ELSE
    Equal
    FC
    GoE
    Greater
    IF
    IGUAL
    INT
    LoE
    Lower
    NOT
    OR
    WHILE

Grammar

Rule 0     S' -> Expression
Rule 1     Expression -> Values
Rule 2     Expression -> Expression ADD Values
Rule 3     Expression -> Expression SUB Values
Rule 4     Values -> Value
Rule 5     Values -> Values MUL Value
Rule 6     Values -> Values DIV Value
Rule 7     Values -> Values MOD Value
Rule 8     Value -> Nint
Rule 9     Value -> VAR
Rule 10    Value -> AP Expression FP

Terminals, with rules where they appear

AC                   : 
ADD                  : 2
AND                  : 
AP                   : 10
DIV                  : 6
Diff                 : 
ELSE                 : 
Equal                : 
FC                   : 
FP                   : 10
GoE                  : 
Greater              : 
IF                   : 
IGUAL                : 
INT                  : 
LoE                  : 
Lower                : 
MOD                  : 7
MUL                  : 5
NOT                  : 
Nint                 : 8
OR                   : 
SUB                  : 3
VAR                  : 9
WHILE                : 
error                : 

Nonterminals, with rules where they appear

Expression           : 2 3 10 0
Value                : 4 5 6 7
Values               : 1 2 3 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . Expression
    (1) Expression -> . Values
    (2) Expression -> . Expression ADD Values
    (3) Expression -> . Expression SUB Values
    (4) Values -> . Value
    (5) Values -> . Values MUL Value
    (6) Values -> . Values DIV Value
    (7) Values -> . Values MOD Value
    (8) Value -> . Nint
    (9) Value -> . VAR
    (10) Value -> . AP Expression FP

    Nint            shift and go to state 4
    VAR             shift and go to state 5
    AP              shift and go to state 6

    Expression                     shift and go to state 1
    Values                         shift and go to state 2
    Value                          shift and go to state 3

state 1

    (0) S' -> Expression .
    (2) Expression -> Expression . ADD Values
    (3) Expression -> Expression . SUB Values

    ADD             shift and go to state 7
    SUB             shift and go to state 8


state 2

    (1) Expression -> Values .
    (5) Values -> Values . MUL Value
    (6) Values -> Values . DIV Value
    (7) Values -> Values . MOD Value

    ADD             reduce using rule 1 (Expression -> Values .)
    SUB             reduce using rule 1 (Expression -> Values .)
    $end            reduce using rule 1 (Expression -> Values .)
    FP              reduce using rule 1 (Expression -> Values .)
    MUL             shift and go to state 9
    DIV             shift and go to state 10
    MOD             shift and go to state 11


state 3

    (4) Values -> Value .

    MUL             reduce using rule 4 (Values -> Value .)
    DIV             reduce using rule 4 (Values -> Value .)
    MOD             reduce using rule 4 (Values -> Value .)
    ADD             reduce using rule 4 (Values -> Value .)
    SUB             reduce using rule 4 (Values -> Value .)
    $end            reduce using rule 4 (Values -> Value .)
    FP              reduce using rule 4 (Values -> Value .)


state 4

    (8) Value -> Nint .

    MUL             reduce using rule 8 (Value -> Nint .)
    DIV             reduce using rule 8 (Value -> Nint .)
    MOD             reduce using rule 8 (Value -> Nint .)
    ADD             reduce using rule 8 (Value -> Nint .)
    SUB             reduce using rule 8 (Value -> Nint .)
    $end            reduce using rule 8 (Value -> Nint .)
    FP              reduce using rule 8 (Value -> Nint .)


state 5

    (9) Value -> VAR .

    MUL             reduce using rule 9 (Value -> VAR .)
    DIV             reduce using rule 9 (Value -> VAR .)
    MOD             reduce using rule 9 (Value -> VAR .)
    ADD             reduce using rule 9 (Value -> VAR .)
    SUB             reduce using rule 9 (Value -> VAR .)
    $end            reduce using rule 9 (Value -> VAR .)
    FP              reduce using rule 9 (Value -> VAR .)


state 6

    (10) Value -> AP . Expression FP
    (1) Expression -> . Values
    (2) Expression -> . Expression ADD Values
    (3) Expression -> . Expression SUB Values
    (4) Values -> . Value
    (5) Values -> . Values MUL Value
    (6) Values -> . Values DIV Value
    (7) Values -> . Values MOD Value
    (8) Value -> . Nint
    (9) Value -> . VAR
    (10) Value -> . AP Expression FP

    Nint            shift and go to state 4
    VAR             shift and go to state 5
    AP              shift and go to state 6

    Expression                     shift and go to state 12
    Values                         shift and go to state 2
    Value                          shift and go to state 3

state 7

    (2) Expression -> Expression ADD . Values
    (4) Values -> . Value
    (5) Values -> . Values MUL Value
    (6) Values -> . Values DIV Value
    (7) Values -> . Values MOD Value
    (8) Value -> . Nint
    (9) Value -> . VAR
    (10) Value -> . AP Expression FP

    Nint            shift and go to state 4
    VAR             shift and go to state 5
    AP              shift and go to state 6

    Values                         shift and go to state 13
    Value                          shift and go to state 3

state 8

    (3) Expression -> Expression SUB . Values
    (4) Values -> . Value
    (5) Values -> . Values MUL Value
    (6) Values -> . Values DIV Value
    (7) Values -> . Values MOD Value
    (8) Value -> . Nint
    (9) Value -> . VAR
    (10) Value -> . AP Expression FP

    Nint            shift and go to state 4
    VAR             shift and go to state 5
    AP              shift and go to state 6

    Values                         shift and go to state 14
    Value                          shift and go to state 3

state 9

    (5) Values -> Values MUL . Value
    (8) Value -> . Nint
    (9) Value -> . VAR
    (10) Value -> . AP Expression FP

    Nint            shift and go to state 4
    VAR             shift and go to state 5
    AP              shift and go to state 6

    Value                          shift and go to state 15

state 10

    (6) Values -> Values DIV . Value
    (8) Value -> . Nint
    (9) Value -> . VAR
    (10) Value -> . AP Expression FP

    Nint            shift and go to state 4
    VAR             shift and go to state 5
    AP              shift and go to state 6

    Value                          shift and go to state 16

state 11

    (7) Values -> Values MOD . Value
    (8) Value -> . Nint
    (9) Value -> . VAR
    (10) Value -> . AP Expression FP

    Nint            shift and go to state 4
    VAR             shift and go to state 5
    AP              shift and go to state 6

    Value                          shift and go to state 17

state 12

    (10) Value -> AP Expression . FP
    (2) Expression -> Expression . ADD Values
    (3) Expression -> Expression . SUB Values

    FP              shift and go to state 18
    ADD             shift and go to state 7
    SUB             shift and go to state 8


state 13

    (2) Expression -> Expression ADD Values .
    (5) Values -> Values . MUL Value
    (6) Values -> Values . DIV Value
    (7) Values -> Values . MOD Value

    ADD             reduce using rule 2 (Expression -> Expression ADD Values .)
    SUB             reduce using rule 2 (Expression -> Expression ADD Values .)
    $end            reduce using rule 2 (Expression -> Expression ADD Values .)
    FP              reduce using rule 2 (Expression -> Expression ADD Values .)
    MUL             shift and go to state 9
    DIV             shift and go to state 10
    MOD             shift and go to state 11


state 14

    (3) Expression -> Expression SUB Values .
    (5) Values -> Values . MUL Value
    (6) Values -> Values . DIV Value
    (7) Values -> Values . MOD Value

    ADD             reduce using rule 3 (Expression -> Expression SUB Values .)
    SUB             reduce using rule 3 (Expression -> Expression SUB Values .)
    $end            reduce using rule 3 (Expression -> Expression SUB Values .)
    FP              reduce using rule 3 (Expression -> Expression SUB Values .)
    MUL             shift and go to state 9
    DIV             shift and go to state 10
    MOD             shift and go to state 11


state 15

    (5) Values -> Values MUL Value .

    MUL             reduce using rule 5 (Values -> Values MUL Value .)
    DIV             reduce using rule 5 (Values -> Values MUL Value .)
    MOD             reduce using rule 5 (Values -> Values MUL Value .)
    ADD             reduce using rule 5 (Values -> Values MUL Value .)
    SUB             reduce using rule 5 (Values -> Values MUL Value .)
    $end            reduce using rule 5 (Values -> Values MUL Value .)
    FP              reduce using rule 5 (Values -> Values MUL Value .)


state 16

    (6) Values -> Values DIV Value .

    MUL             reduce using rule 6 (Values -> Values DIV Value .)
    DIV             reduce using rule 6 (Values -> Values DIV Value .)
    MOD             reduce using rule 6 (Values -> Values DIV Value .)
    ADD             reduce using rule 6 (Values -> Values DIV Value .)
    SUB             reduce using rule 6 (Values -> Values DIV Value .)
    $end            reduce using rule 6 (Values -> Values DIV Value .)
    FP              reduce using rule 6 (Values -> Values DIV Value .)


state 17

    (7) Values -> Values MOD Value .

    MUL             reduce using rule 7 (Values -> Values MOD Value .)
    DIV             reduce using rule 7 (Values -> Values MOD Value .)
    MOD             reduce using rule 7 (Values -> Values MOD Value .)
    ADD             reduce using rule 7 (Values -> Values MOD Value .)
    SUB             reduce using rule 7 (Values -> Values MOD Value .)
    $end            reduce using rule 7 (Values -> Values MOD Value .)
    FP              reduce using rule 7 (Values -> Values MOD Value .)


state 18

    (10) Value -> AP Expression FP .

    MUL             reduce using rule 10 (Value -> AP Expression FP .)
    DIV             reduce using rule 10 (Value -> AP Expression FP .)
    MOD             reduce using rule 10 (Value -> AP Expression FP .)
    ADD             reduce using rule 10 (Value -> AP Expression FP .)
    SUB             reduce using rule 10 (Value -> AP Expression FP .)
    $end            reduce using rule 10 (Value -> AP Expression FP .)
    FP              reduce using rule 10 (Value -> AP Expression FP .)

