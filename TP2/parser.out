Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Program
Rule 1     Program -> Comands
Rule 2     Comands -> Comand Comands
Rule 3     Comands -> Comand
Rule 4     Comand -> Atribuition
Rule 5     Comand -> Conditional
Rule 6     Comand -> Expression
Rule 7     Comand -> Cycle
Rule 8     Conditional -> IF AP Conditions FP AC Comands FC ELSE AC Comands FC
Rule 9     Conditional -> IF AP Conditions FP AC Comands FC
Rule 10    Conditions -> Neg Condition LogicSymb Conditions
Rule 11    Conditions -> Neg Condition
Rule 12    Condition -> Expression OpRel Expression
Rule 13    Condition -> Expression
Rule 14    Neg -> NOT
Rule 15    Neg -> <empty>
Rule 16    LogicSymb -> OR
Rule 17    LogicSymb -> AND
Rule 18    OpRel -> GoE
Rule 19    OpRel -> LoE
Rule 20    OpRel -> Lower
Rule 21    OpRel -> Greater
Rule 22    OpRel -> IGUAL
Rule 23    OpRel -> DIFF
Rule 24    Cycle -> WHILE AP Conditions FP AC Comands FC
Rule 25    Atribuition -> INT VAR EQUAL Expression
Rule 26    Atribuition -> VAR EQUAL Expression
Rule 27    Atribuition -> INT VAR
Rule 28    Expression -> Values
Rule 29    Expression -> Expression ADD Values
Rule 30    Expression -> Expression SUB Values
Rule 31    Values -> Value
Rule 32    Values -> Values MUL Value
Rule 33    Values -> Values DIV Value
Rule 34    Values -> Values MOD Value
Rule 35    Value -> Nint
Rule 36    Value -> VAR
Rule 37    Value -> AP Expression FP
Rule 38    IO -> INPUT
Rule 39    IO -> OUTPUT
Rule 40    INPUT -> SCAN VAR
Rule 41    OUTPUT -> PRINT Expression
Rule 42    OUTPUT -> PRINT VAR
Rule 43    TIPO -> INT

Terminals, with rules where they appear

AC                   : 8 8 9 24
ADD                  : 29
AND                  : 17
AP                   : 8 9 24 37
DIFF                 : 23
DIV                  : 33
ELSE                 : 8
EQUAL                : 25 26
FC                   : 8 8 9 24
FP                   : 8 9 24 37
GoE                  : 18
Greater              : 21
IF                   : 8 9
IGUAL                : 22
INT                  : 25 27 43
LoE                  : 19
Lower                : 20
MOD                  : 34
MUL                  : 32
NOT                  : 14
Nint                 : 35
OR                   : 16
PRINT                : 41 42
SCAN                 : 40
SUB                  : 30
VAR                  : 25 26 27 36 40 42
WHILE                : 24
error                : 

Nonterminals, with rules where they appear

Atribuition          : 4
Comand               : 2 3
Comands              : 1 2 8 8 9 24
Condition            : 10 11
Conditional          : 5
Conditions           : 8 9 10 24
Cycle                : 7
Expression           : 6 12 12 13 25 26 29 30 37 41
INPUT                : 38
IO                   : 
LogicSymb            : 10
Neg                  : 10 11
OUTPUT               : 39
OpRel                : 12
Program              : 0
TIPO                 : 
Value                : 31 32 33 34
Values               : 28 29 30 32 33 34

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . Comands
    (2) Comands -> . Comand Comands
    (3) Comands -> . Comand
    (4) Comand -> . Atribuition
    (5) Comand -> . Conditional
    (6) Comand -> . Expression
    (7) Comand -> . Cycle
    (25) Atribuition -> . INT VAR EQUAL Expression
    (26) Atribuition -> . VAR EQUAL Expression
    (27) Atribuition -> . INT VAR
    (8) Conditional -> . IF AP Conditions FP AC Comands FC ELSE AC Comands FC
    (9) Conditional -> . IF AP Conditions FP AC Comands FC
    (28) Expression -> . Values
    (29) Expression -> . Expression ADD Values
    (30) Expression -> . Expression SUB Values
    (24) Cycle -> . WHILE AP Conditions FP AC Comands FC
    (31) Values -> . Value
    (32) Values -> . Values MUL Value
    (33) Values -> . Values DIV Value
    (34) Values -> . Values MOD Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    INT             shift and go to state 8
    VAR             shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 13
    Nint            shift and go to state 15
    AP              shift and go to state 11

    Program                        shift and go to state 1
    Comands                        shift and go to state 2
    Comand                         shift and go to state 3
    Atribuition                    shift and go to state 4
    Conditional                    shift and go to state 5
    Expression                     shift and go to state 6
    Cycle                          shift and go to state 7
    Values                         shift and go to state 12
    Value                          shift and go to state 14

state 1

    (0) S' -> Program .



state 2

    (1) Program -> Comands .

    $end            reduce using rule 1 (Program -> Comands .)


state 3

    (2) Comands -> Comand . Comands
    (3) Comands -> Comand .
    (2) Comands -> . Comand Comands
    (3) Comands -> . Comand
    (4) Comand -> . Atribuition
    (5) Comand -> . Conditional
    (6) Comand -> . Expression
    (7) Comand -> . Cycle
    (25) Atribuition -> . INT VAR EQUAL Expression
    (26) Atribuition -> . VAR EQUAL Expression
    (27) Atribuition -> . INT VAR
    (8) Conditional -> . IF AP Conditions FP AC Comands FC ELSE AC Comands FC
    (9) Conditional -> . IF AP Conditions FP AC Comands FC
    (28) Expression -> . Values
    (29) Expression -> . Expression ADD Values
    (30) Expression -> . Expression SUB Values
    (24) Cycle -> . WHILE AP Conditions FP AC Comands FC
    (31) Values -> . Value
    (32) Values -> . Values MUL Value
    (33) Values -> . Values DIV Value
    (34) Values -> . Values MOD Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    $end            reduce using rule 3 (Comands -> Comand .)
    FC              reduce using rule 3 (Comands -> Comand .)
    INT             shift and go to state 8
    VAR             shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 13
    Nint            shift and go to state 15
    AP              shift and go to state 11

    Comand                         shift and go to state 3
    Comands                        shift and go to state 16
    Atribuition                    shift and go to state 4
    Conditional                    shift and go to state 5
    Expression                     shift and go to state 6
    Cycle                          shift and go to state 7
    Values                         shift and go to state 12
    Value                          shift and go to state 14

state 4

    (4) Comand -> Atribuition .

    INT             reduce using rule 4 (Comand -> Atribuition .)
    VAR             reduce using rule 4 (Comand -> Atribuition .)
    IF              reduce using rule 4 (Comand -> Atribuition .)
    WHILE           reduce using rule 4 (Comand -> Atribuition .)
    Nint            reduce using rule 4 (Comand -> Atribuition .)
    AP              reduce using rule 4 (Comand -> Atribuition .)
    $end            reduce using rule 4 (Comand -> Atribuition .)
    FC              reduce using rule 4 (Comand -> Atribuition .)


state 5

    (5) Comand -> Conditional .

    INT             reduce using rule 5 (Comand -> Conditional .)
    VAR             reduce using rule 5 (Comand -> Conditional .)
    IF              reduce using rule 5 (Comand -> Conditional .)
    WHILE           reduce using rule 5 (Comand -> Conditional .)
    Nint            reduce using rule 5 (Comand -> Conditional .)
    AP              reduce using rule 5 (Comand -> Conditional .)
    $end            reduce using rule 5 (Comand -> Conditional .)
    FC              reduce using rule 5 (Comand -> Conditional .)


state 6

    (6) Comand -> Expression .
    (29) Expression -> Expression . ADD Values
    (30) Expression -> Expression . SUB Values

    INT             reduce using rule 6 (Comand -> Expression .)
    VAR             reduce using rule 6 (Comand -> Expression .)
    IF              reduce using rule 6 (Comand -> Expression .)
    WHILE           reduce using rule 6 (Comand -> Expression .)
    Nint            reduce using rule 6 (Comand -> Expression .)
    AP              reduce using rule 6 (Comand -> Expression .)
    $end            reduce using rule 6 (Comand -> Expression .)
    FC              reduce using rule 6 (Comand -> Expression .)
    ADD             shift and go to state 17
    SUB             shift and go to state 18


state 7

    (7) Comand -> Cycle .

    INT             reduce using rule 7 (Comand -> Cycle .)
    VAR             reduce using rule 7 (Comand -> Cycle .)
    IF              reduce using rule 7 (Comand -> Cycle .)
    WHILE           reduce using rule 7 (Comand -> Cycle .)
    Nint            reduce using rule 7 (Comand -> Cycle .)
    AP              reduce using rule 7 (Comand -> Cycle .)
    $end            reduce using rule 7 (Comand -> Cycle .)
    FC              reduce using rule 7 (Comand -> Cycle .)


state 8

    (25) Atribuition -> INT . VAR EQUAL Expression
    (27) Atribuition -> INT . VAR

    VAR             shift and go to state 19


state 9

    (26) Atribuition -> VAR . EQUAL Expression
    (36) Value -> VAR .

    EQUAL           shift and go to state 20
    MUL             reduce using rule 36 (Value -> VAR .)
    DIV             reduce using rule 36 (Value -> VAR .)
    MOD             reduce using rule 36 (Value -> VAR .)
    ADD             reduce using rule 36 (Value -> VAR .)
    SUB             reduce using rule 36 (Value -> VAR .)
    INT             reduce using rule 36 (Value -> VAR .)
    VAR             reduce using rule 36 (Value -> VAR .)
    IF              reduce using rule 36 (Value -> VAR .)
    WHILE           reduce using rule 36 (Value -> VAR .)
    Nint            reduce using rule 36 (Value -> VAR .)
    AP              reduce using rule 36 (Value -> VAR .)
    $end            reduce using rule 36 (Value -> VAR .)
    FC              reduce using rule 36 (Value -> VAR .)


state 10

    (8) Conditional -> IF . AP Conditions FP AC Comands FC ELSE AC Comands FC
    (9) Conditional -> IF . AP Conditions FP AC Comands FC

    AP              shift and go to state 21


state 11

    (37) Value -> AP . Expression FP
    (28) Expression -> . Values
    (29) Expression -> . Expression ADD Values
    (30) Expression -> . Expression SUB Values
    (31) Values -> . Value
    (32) Values -> . Values MUL Value
    (33) Values -> . Values DIV Value
    (34) Values -> . Values MOD Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    Nint            shift and go to state 15
    VAR             shift and go to state 23
    AP              shift and go to state 11

    Expression                     shift and go to state 22
    Values                         shift and go to state 12
    Value                          shift and go to state 14

state 12

    (28) Expression -> Values .
    (32) Values -> Values . MUL Value
    (33) Values -> Values . DIV Value
    (34) Values -> Values . MOD Value

    ADD             reduce using rule 28 (Expression -> Values .)
    SUB             reduce using rule 28 (Expression -> Values .)
    INT             reduce using rule 28 (Expression -> Values .)
    VAR             reduce using rule 28 (Expression -> Values .)
    IF              reduce using rule 28 (Expression -> Values .)
    WHILE           reduce using rule 28 (Expression -> Values .)
    Nint            reduce using rule 28 (Expression -> Values .)
    AP              reduce using rule 28 (Expression -> Values .)
    $end            reduce using rule 28 (Expression -> Values .)
    FC              reduce using rule 28 (Expression -> Values .)
    FP              reduce using rule 28 (Expression -> Values .)
    GoE             reduce using rule 28 (Expression -> Values .)
    LoE             reduce using rule 28 (Expression -> Values .)
    Lower           reduce using rule 28 (Expression -> Values .)
    Greater         reduce using rule 28 (Expression -> Values .)
    IGUAL           reduce using rule 28 (Expression -> Values .)
    DIFF            reduce using rule 28 (Expression -> Values .)
    OR              reduce using rule 28 (Expression -> Values .)
    AND             reduce using rule 28 (Expression -> Values .)
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26


state 13

    (24) Cycle -> WHILE . AP Conditions FP AC Comands FC

    AP              shift and go to state 27


state 14

    (31) Values -> Value .

    MUL             reduce using rule 31 (Values -> Value .)
    DIV             reduce using rule 31 (Values -> Value .)
    MOD             reduce using rule 31 (Values -> Value .)
    ADD             reduce using rule 31 (Values -> Value .)
    SUB             reduce using rule 31 (Values -> Value .)
    INT             reduce using rule 31 (Values -> Value .)
    VAR             reduce using rule 31 (Values -> Value .)
    IF              reduce using rule 31 (Values -> Value .)
    WHILE           reduce using rule 31 (Values -> Value .)
    Nint            reduce using rule 31 (Values -> Value .)
    AP              reduce using rule 31 (Values -> Value .)
    $end            reduce using rule 31 (Values -> Value .)
    FC              reduce using rule 31 (Values -> Value .)
    FP              reduce using rule 31 (Values -> Value .)
    GoE             reduce using rule 31 (Values -> Value .)
    LoE             reduce using rule 31 (Values -> Value .)
    Lower           reduce using rule 31 (Values -> Value .)
    Greater         reduce using rule 31 (Values -> Value .)
    IGUAL           reduce using rule 31 (Values -> Value .)
    DIFF            reduce using rule 31 (Values -> Value .)
    OR              reduce using rule 31 (Values -> Value .)
    AND             reduce using rule 31 (Values -> Value .)


state 15

    (35) Value -> Nint .

    MUL             reduce using rule 35 (Value -> Nint .)
    DIV             reduce using rule 35 (Value -> Nint .)
    MOD             reduce using rule 35 (Value -> Nint .)
    ADD             reduce using rule 35 (Value -> Nint .)
    SUB             reduce using rule 35 (Value -> Nint .)
    INT             reduce using rule 35 (Value -> Nint .)
    VAR             reduce using rule 35 (Value -> Nint .)
    IF              reduce using rule 35 (Value -> Nint .)
    WHILE           reduce using rule 35 (Value -> Nint .)
    Nint            reduce using rule 35 (Value -> Nint .)
    AP              reduce using rule 35 (Value -> Nint .)
    $end            reduce using rule 35 (Value -> Nint .)
    FC              reduce using rule 35 (Value -> Nint .)
    FP              reduce using rule 35 (Value -> Nint .)
    GoE             reduce using rule 35 (Value -> Nint .)
    LoE             reduce using rule 35 (Value -> Nint .)
    Lower           reduce using rule 35 (Value -> Nint .)
    Greater         reduce using rule 35 (Value -> Nint .)
    IGUAL           reduce using rule 35 (Value -> Nint .)
    DIFF            reduce using rule 35 (Value -> Nint .)
    OR              reduce using rule 35 (Value -> Nint .)
    AND             reduce using rule 35 (Value -> Nint .)


state 16

    (2) Comands -> Comand Comands .

    $end            reduce using rule 2 (Comands -> Comand Comands .)
    FC              reduce using rule 2 (Comands -> Comand Comands .)


state 17

    (29) Expression -> Expression ADD . Values
    (31) Values -> . Value
    (32) Values -> . Values MUL Value
    (33) Values -> . Values DIV Value
    (34) Values -> . Values MOD Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    Nint            shift and go to state 15
    VAR             shift and go to state 23
    AP              shift and go to state 11

    Values                         shift and go to state 28
    Value                          shift and go to state 14

state 18

    (30) Expression -> Expression SUB . Values
    (31) Values -> . Value
    (32) Values -> . Values MUL Value
    (33) Values -> . Values DIV Value
    (34) Values -> . Values MOD Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    Nint            shift and go to state 15
    VAR             shift and go to state 23
    AP              shift and go to state 11

    Values                         shift and go to state 29
    Value                          shift and go to state 14

state 19

    (25) Atribuition -> INT VAR . EQUAL Expression
    (27) Atribuition -> INT VAR .

    EQUAL           shift and go to state 30
    INT             reduce using rule 27 (Atribuition -> INT VAR .)
    VAR             reduce using rule 27 (Atribuition -> INT VAR .)
    IF              reduce using rule 27 (Atribuition -> INT VAR .)
    WHILE           reduce using rule 27 (Atribuition -> INT VAR .)
    Nint            reduce using rule 27 (Atribuition -> INT VAR .)
    AP              reduce using rule 27 (Atribuition -> INT VAR .)
    $end            reduce using rule 27 (Atribuition -> INT VAR .)
    FC              reduce using rule 27 (Atribuition -> INT VAR .)


state 20

    (26) Atribuition -> VAR EQUAL . Expression
    (28) Expression -> . Values
    (29) Expression -> . Expression ADD Values
    (30) Expression -> . Expression SUB Values
    (31) Values -> . Value
    (32) Values -> . Values MUL Value
    (33) Values -> . Values DIV Value
    (34) Values -> . Values MOD Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    Nint            shift and go to state 15
    VAR             shift and go to state 23
    AP              shift and go to state 11

    Expression                     shift and go to state 31
    Values                         shift and go to state 12
    Value                          shift and go to state 14

state 21

    (8) Conditional -> IF AP . Conditions FP AC Comands FC ELSE AC Comands FC
    (9) Conditional -> IF AP . Conditions FP AC Comands FC
    (10) Conditions -> . Neg Condition LogicSymb Conditions
    (11) Conditions -> . Neg Condition
    (14) Neg -> . NOT
    (15) Neg -> .

    NOT             shift and go to state 34
    Nint            reduce using rule 15 (Neg -> .)
    VAR             reduce using rule 15 (Neg -> .)
    AP              reduce using rule 15 (Neg -> .)

    Conditions                     shift and go to state 32
    Neg                            shift and go to state 33

state 22

    (37) Value -> AP Expression . FP
    (29) Expression -> Expression . ADD Values
    (30) Expression -> Expression . SUB Values

    FP              shift and go to state 35
    ADD             shift and go to state 17
    SUB             shift and go to state 18


state 23

    (36) Value -> VAR .

    MUL             reduce using rule 36 (Value -> VAR .)
    DIV             reduce using rule 36 (Value -> VAR .)
    MOD             reduce using rule 36 (Value -> VAR .)
    FP              reduce using rule 36 (Value -> VAR .)
    ADD             reduce using rule 36 (Value -> VAR .)
    SUB             reduce using rule 36 (Value -> VAR .)
    INT             reduce using rule 36 (Value -> VAR .)
    VAR             reduce using rule 36 (Value -> VAR .)
    IF              reduce using rule 36 (Value -> VAR .)
    WHILE           reduce using rule 36 (Value -> VAR .)
    Nint            reduce using rule 36 (Value -> VAR .)
    AP              reduce using rule 36 (Value -> VAR .)
    $end            reduce using rule 36 (Value -> VAR .)
    FC              reduce using rule 36 (Value -> VAR .)
    GoE             reduce using rule 36 (Value -> VAR .)
    LoE             reduce using rule 36 (Value -> VAR .)
    Lower           reduce using rule 36 (Value -> VAR .)
    Greater         reduce using rule 36 (Value -> VAR .)
    IGUAL           reduce using rule 36 (Value -> VAR .)
    DIFF            reduce using rule 36 (Value -> VAR .)
    OR              reduce using rule 36 (Value -> VAR .)
    AND             reduce using rule 36 (Value -> VAR .)


state 24

    (32) Values -> Values MUL . Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    Nint            shift and go to state 15
    VAR             shift and go to state 23
    AP              shift and go to state 11

    Value                          shift and go to state 36

state 25

    (33) Values -> Values DIV . Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    Nint            shift and go to state 15
    VAR             shift and go to state 23
    AP              shift and go to state 11

    Value                          shift and go to state 37

state 26

    (34) Values -> Values MOD . Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    Nint            shift and go to state 15
    VAR             shift and go to state 23
    AP              shift and go to state 11

    Value                          shift and go to state 38

state 27

    (24) Cycle -> WHILE AP . Conditions FP AC Comands FC
    (10) Conditions -> . Neg Condition LogicSymb Conditions
    (11) Conditions -> . Neg Condition
    (14) Neg -> . NOT
    (15) Neg -> .

    NOT             shift and go to state 34
    Nint            reduce using rule 15 (Neg -> .)
    VAR             reduce using rule 15 (Neg -> .)
    AP              reduce using rule 15 (Neg -> .)

    Conditions                     shift and go to state 39
    Neg                            shift and go to state 33

state 28

    (29) Expression -> Expression ADD Values .
    (32) Values -> Values . MUL Value
    (33) Values -> Values . DIV Value
    (34) Values -> Values . MOD Value

    ADD             reduce using rule 29 (Expression -> Expression ADD Values .)
    SUB             reduce using rule 29 (Expression -> Expression ADD Values .)
    INT             reduce using rule 29 (Expression -> Expression ADD Values .)
    VAR             reduce using rule 29 (Expression -> Expression ADD Values .)
    IF              reduce using rule 29 (Expression -> Expression ADD Values .)
    WHILE           reduce using rule 29 (Expression -> Expression ADD Values .)
    Nint            reduce using rule 29 (Expression -> Expression ADD Values .)
    AP              reduce using rule 29 (Expression -> Expression ADD Values .)
    $end            reduce using rule 29 (Expression -> Expression ADD Values .)
    FC              reduce using rule 29 (Expression -> Expression ADD Values .)
    FP              reduce using rule 29 (Expression -> Expression ADD Values .)
    GoE             reduce using rule 29 (Expression -> Expression ADD Values .)
    LoE             reduce using rule 29 (Expression -> Expression ADD Values .)
    Lower           reduce using rule 29 (Expression -> Expression ADD Values .)
    Greater         reduce using rule 29 (Expression -> Expression ADD Values .)
    IGUAL           reduce using rule 29 (Expression -> Expression ADD Values .)
    DIFF            reduce using rule 29 (Expression -> Expression ADD Values .)
    OR              reduce using rule 29 (Expression -> Expression ADD Values .)
    AND             reduce using rule 29 (Expression -> Expression ADD Values .)
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26


state 29

    (30) Expression -> Expression SUB Values .
    (32) Values -> Values . MUL Value
    (33) Values -> Values . DIV Value
    (34) Values -> Values . MOD Value

    ADD             reduce using rule 30 (Expression -> Expression SUB Values .)
    SUB             reduce using rule 30 (Expression -> Expression SUB Values .)
    INT             reduce using rule 30 (Expression -> Expression SUB Values .)
    VAR             reduce using rule 30 (Expression -> Expression SUB Values .)
    IF              reduce using rule 30 (Expression -> Expression SUB Values .)
    WHILE           reduce using rule 30 (Expression -> Expression SUB Values .)
    Nint            reduce using rule 30 (Expression -> Expression SUB Values .)
    AP              reduce using rule 30 (Expression -> Expression SUB Values .)
    $end            reduce using rule 30 (Expression -> Expression SUB Values .)
    FC              reduce using rule 30 (Expression -> Expression SUB Values .)
    FP              reduce using rule 30 (Expression -> Expression SUB Values .)
    GoE             reduce using rule 30 (Expression -> Expression SUB Values .)
    LoE             reduce using rule 30 (Expression -> Expression SUB Values .)
    Lower           reduce using rule 30 (Expression -> Expression SUB Values .)
    Greater         reduce using rule 30 (Expression -> Expression SUB Values .)
    IGUAL           reduce using rule 30 (Expression -> Expression SUB Values .)
    DIFF            reduce using rule 30 (Expression -> Expression SUB Values .)
    OR              reduce using rule 30 (Expression -> Expression SUB Values .)
    AND             reduce using rule 30 (Expression -> Expression SUB Values .)
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26


state 30

    (25) Atribuition -> INT VAR EQUAL . Expression
    (28) Expression -> . Values
    (29) Expression -> . Expression ADD Values
    (30) Expression -> . Expression SUB Values
    (31) Values -> . Value
    (32) Values -> . Values MUL Value
    (33) Values -> . Values DIV Value
    (34) Values -> . Values MOD Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    Nint            shift and go to state 15
    VAR             shift and go to state 23
    AP              shift and go to state 11

    Expression                     shift and go to state 40
    Values                         shift and go to state 12
    Value                          shift and go to state 14

state 31

    (26) Atribuition -> VAR EQUAL Expression .
    (29) Expression -> Expression . ADD Values
    (30) Expression -> Expression . SUB Values

    INT             reduce using rule 26 (Atribuition -> VAR EQUAL Expression .)
    VAR             reduce using rule 26 (Atribuition -> VAR EQUAL Expression .)
    IF              reduce using rule 26 (Atribuition -> VAR EQUAL Expression .)
    WHILE           reduce using rule 26 (Atribuition -> VAR EQUAL Expression .)
    Nint            reduce using rule 26 (Atribuition -> VAR EQUAL Expression .)
    AP              reduce using rule 26 (Atribuition -> VAR EQUAL Expression .)
    $end            reduce using rule 26 (Atribuition -> VAR EQUAL Expression .)
    FC              reduce using rule 26 (Atribuition -> VAR EQUAL Expression .)
    ADD             shift and go to state 17
    SUB             shift and go to state 18


state 32

    (8) Conditional -> IF AP Conditions . FP AC Comands FC ELSE AC Comands FC
    (9) Conditional -> IF AP Conditions . FP AC Comands FC

    FP              shift and go to state 41


state 33

    (10) Conditions -> Neg . Condition LogicSymb Conditions
    (11) Conditions -> Neg . Condition
    (12) Condition -> . Expression OpRel Expression
    (13) Condition -> . Expression
    (28) Expression -> . Values
    (29) Expression -> . Expression ADD Values
    (30) Expression -> . Expression SUB Values
    (31) Values -> . Value
    (32) Values -> . Values MUL Value
    (33) Values -> . Values DIV Value
    (34) Values -> . Values MOD Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    Nint            shift and go to state 15
    VAR             shift and go to state 23
    AP              shift and go to state 11

    Condition                      shift and go to state 42
    Expression                     shift and go to state 43
    Values                         shift and go to state 12
    Value                          shift and go to state 14

state 34

    (14) Neg -> NOT .

    Nint            reduce using rule 14 (Neg -> NOT .)
    VAR             reduce using rule 14 (Neg -> NOT .)
    AP              reduce using rule 14 (Neg -> NOT .)


state 35

    (37) Value -> AP Expression FP .

    MUL             reduce using rule 37 (Value -> AP Expression FP .)
    DIV             reduce using rule 37 (Value -> AP Expression FP .)
    MOD             reduce using rule 37 (Value -> AP Expression FP .)
    ADD             reduce using rule 37 (Value -> AP Expression FP .)
    SUB             reduce using rule 37 (Value -> AP Expression FP .)
    INT             reduce using rule 37 (Value -> AP Expression FP .)
    VAR             reduce using rule 37 (Value -> AP Expression FP .)
    IF              reduce using rule 37 (Value -> AP Expression FP .)
    WHILE           reduce using rule 37 (Value -> AP Expression FP .)
    Nint            reduce using rule 37 (Value -> AP Expression FP .)
    AP              reduce using rule 37 (Value -> AP Expression FP .)
    $end            reduce using rule 37 (Value -> AP Expression FP .)
    FC              reduce using rule 37 (Value -> AP Expression FP .)
    FP              reduce using rule 37 (Value -> AP Expression FP .)
    GoE             reduce using rule 37 (Value -> AP Expression FP .)
    LoE             reduce using rule 37 (Value -> AP Expression FP .)
    Lower           reduce using rule 37 (Value -> AP Expression FP .)
    Greater         reduce using rule 37 (Value -> AP Expression FP .)
    IGUAL           reduce using rule 37 (Value -> AP Expression FP .)
    DIFF            reduce using rule 37 (Value -> AP Expression FP .)
    OR              reduce using rule 37 (Value -> AP Expression FP .)
    AND             reduce using rule 37 (Value -> AP Expression FP .)


state 36

    (32) Values -> Values MUL Value .

    MUL             reduce using rule 32 (Values -> Values MUL Value .)
    DIV             reduce using rule 32 (Values -> Values MUL Value .)
    MOD             reduce using rule 32 (Values -> Values MUL Value .)
    ADD             reduce using rule 32 (Values -> Values MUL Value .)
    SUB             reduce using rule 32 (Values -> Values MUL Value .)
    INT             reduce using rule 32 (Values -> Values MUL Value .)
    VAR             reduce using rule 32 (Values -> Values MUL Value .)
    IF              reduce using rule 32 (Values -> Values MUL Value .)
    WHILE           reduce using rule 32 (Values -> Values MUL Value .)
    Nint            reduce using rule 32 (Values -> Values MUL Value .)
    AP              reduce using rule 32 (Values -> Values MUL Value .)
    $end            reduce using rule 32 (Values -> Values MUL Value .)
    FC              reduce using rule 32 (Values -> Values MUL Value .)
    FP              reduce using rule 32 (Values -> Values MUL Value .)
    GoE             reduce using rule 32 (Values -> Values MUL Value .)
    LoE             reduce using rule 32 (Values -> Values MUL Value .)
    Lower           reduce using rule 32 (Values -> Values MUL Value .)
    Greater         reduce using rule 32 (Values -> Values MUL Value .)
    IGUAL           reduce using rule 32 (Values -> Values MUL Value .)
    DIFF            reduce using rule 32 (Values -> Values MUL Value .)
    OR              reduce using rule 32 (Values -> Values MUL Value .)
    AND             reduce using rule 32 (Values -> Values MUL Value .)


state 37

    (33) Values -> Values DIV Value .

    MUL             reduce using rule 33 (Values -> Values DIV Value .)
    DIV             reduce using rule 33 (Values -> Values DIV Value .)
    MOD             reduce using rule 33 (Values -> Values DIV Value .)
    ADD             reduce using rule 33 (Values -> Values DIV Value .)
    SUB             reduce using rule 33 (Values -> Values DIV Value .)
    INT             reduce using rule 33 (Values -> Values DIV Value .)
    VAR             reduce using rule 33 (Values -> Values DIV Value .)
    IF              reduce using rule 33 (Values -> Values DIV Value .)
    WHILE           reduce using rule 33 (Values -> Values DIV Value .)
    Nint            reduce using rule 33 (Values -> Values DIV Value .)
    AP              reduce using rule 33 (Values -> Values DIV Value .)
    $end            reduce using rule 33 (Values -> Values DIV Value .)
    FC              reduce using rule 33 (Values -> Values DIV Value .)
    FP              reduce using rule 33 (Values -> Values DIV Value .)
    GoE             reduce using rule 33 (Values -> Values DIV Value .)
    LoE             reduce using rule 33 (Values -> Values DIV Value .)
    Lower           reduce using rule 33 (Values -> Values DIV Value .)
    Greater         reduce using rule 33 (Values -> Values DIV Value .)
    IGUAL           reduce using rule 33 (Values -> Values DIV Value .)
    DIFF            reduce using rule 33 (Values -> Values DIV Value .)
    OR              reduce using rule 33 (Values -> Values DIV Value .)
    AND             reduce using rule 33 (Values -> Values DIV Value .)


state 38

    (34) Values -> Values MOD Value .

    MUL             reduce using rule 34 (Values -> Values MOD Value .)
    DIV             reduce using rule 34 (Values -> Values MOD Value .)
    MOD             reduce using rule 34 (Values -> Values MOD Value .)
    ADD             reduce using rule 34 (Values -> Values MOD Value .)
    SUB             reduce using rule 34 (Values -> Values MOD Value .)
    INT             reduce using rule 34 (Values -> Values MOD Value .)
    VAR             reduce using rule 34 (Values -> Values MOD Value .)
    IF              reduce using rule 34 (Values -> Values MOD Value .)
    WHILE           reduce using rule 34 (Values -> Values MOD Value .)
    Nint            reduce using rule 34 (Values -> Values MOD Value .)
    AP              reduce using rule 34 (Values -> Values MOD Value .)
    $end            reduce using rule 34 (Values -> Values MOD Value .)
    FC              reduce using rule 34 (Values -> Values MOD Value .)
    FP              reduce using rule 34 (Values -> Values MOD Value .)
    GoE             reduce using rule 34 (Values -> Values MOD Value .)
    LoE             reduce using rule 34 (Values -> Values MOD Value .)
    Lower           reduce using rule 34 (Values -> Values MOD Value .)
    Greater         reduce using rule 34 (Values -> Values MOD Value .)
    IGUAL           reduce using rule 34 (Values -> Values MOD Value .)
    DIFF            reduce using rule 34 (Values -> Values MOD Value .)
    OR              reduce using rule 34 (Values -> Values MOD Value .)
    AND             reduce using rule 34 (Values -> Values MOD Value .)


state 39

    (24) Cycle -> WHILE AP Conditions . FP AC Comands FC

    FP              shift and go to state 44


state 40

    (25) Atribuition -> INT VAR EQUAL Expression .
    (29) Expression -> Expression . ADD Values
    (30) Expression -> Expression . SUB Values

    INT             reduce using rule 25 (Atribuition -> INT VAR EQUAL Expression .)
    VAR             reduce using rule 25 (Atribuition -> INT VAR EQUAL Expression .)
    IF              reduce using rule 25 (Atribuition -> INT VAR EQUAL Expression .)
    WHILE           reduce using rule 25 (Atribuition -> INT VAR EQUAL Expression .)
    Nint            reduce using rule 25 (Atribuition -> INT VAR EQUAL Expression .)
    AP              reduce using rule 25 (Atribuition -> INT VAR EQUAL Expression .)
    $end            reduce using rule 25 (Atribuition -> INT VAR EQUAL Expression .)
    FC              reduce using rule 25 (Atribuition -> INT VAR EQUAL Expression .)
    ADD             shift and go to state 17
    SUB             shift and go to state 18


state 41

    (8) Conditional -> IF AP Conditions FP . AC Comands FC ELSE AC Comands FC
    (9) Conditional -> IF AP Conditions FP . AC Comands FC

    AC              shift and go to state 45


state 42

    (10) Conditions -> Neg Condition . LogicSymb Conditions
    (11) Conditions -> Neg Condition .
    (16) LogicSymb -> . OR
    (17) LogicSymb -> . AND

    FP              reduce using rule 11 (Conditions -> Neg Condition .)
    OR              shift and go to state 47
    AND             shift and go to state 48

    LogicSymb                      shift and go to state 46

state 43

    (12) Condition -> Expression . OpRel Expression
    (13) Condition -> Expression .
    (29) Expression -> Expression . ADD Values
    (30) Expression -> Expression . SUB Values
    (18) OpRel -> . GoE
    (19) OpRel -> . LoE
    (20) OpRel -> . Lower
    (21) OpRel -> . Greater
    (22) OpRel -> . IGUAL
    (23) OpRel -> . DIFF

    OR              reduce using rule 13 (Condition -> Expression .)
    AND             reduce using rule 13 (Condition -> Expression .)
    FP              reduce using rule 13 (Condition -> Expression .)
    ADD             shift and go to state 17
    SUB             shift and go to state 18
    GoE             shift and go to state 50
    LoE             shift and go to state 51
    Lower           shift and go to state 52
    Greater         shift and go to state 53
    IGUAL           shift and go to state 54
    DIFF            shift and go to state 55

    OpRel                          shift and go to state 49

state 44

    (24) Cycle -> WHILE AP Conditions FP . AC Comands FC

    AC              shift and go to state 56


state 45

    (8) Conditional -> IF AP Conditions FP AC . Comands FC ELSE AC Comands FC
    (9) Conditional -> IF AP Conditions FP AC . Comands FC
    (2) Comands -> . Comand Comands
    (3) Comands -> . Comand
    (4) Comand -> . Atribuition
    (5) Comand -> . Conditional
    (6) Comand -> . Expression
    (7) Comand -> . Cycle
    (25) Atribuition -> . INT VAR EQUAL Expression
    (26) Atribuition -> . VAR EQUAL Expression
    (27) Atribuition -> . INT VAR
    (8) Conditional -> . IF AP Conditions FP AC Comands FC ELSE AC Comands FC
    (9) Conditional -> . IF AP Conditions FP AC Comands FC
    (28) Expression -> . Values
    (29) Expression -> . Expression ADD Values
    (30) Expression -> . Expression SUB Values
    (24) Cycle -> . WHILE AP Conditions FP AC Comands FC
    (31) Values -> . Value
    (32) Values -> . Values MUL Value
    (33) Values -> . Values DIV Value
    (34) Values -> . Values MOD Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    INT             shift and go to state 8
    VAR             shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 13
    Nint            shift and go to state 15
    AP              shift and go to state 11

    Comands                        shift and go to state 57
    Comand                         shift and go to state 3
    Atribuition                    shift and go to state 4
    Conditional                    shift and go to state 5
    Expression                     shift and go to state 6
    Cycle                          shift and go to state 7
    Values                         shift and go to state 12
    Value                          shift and go to state 14

state 46

    (10) Conditions -> Neg Condition LogicSymb . Conditions
    (10) Conditions -> . Neg Condition LogicSymb Conditions
    (11) Conditions -> . Neg Condition
    (14) Neg -> . NOT
    (15) Neg -> .

    NOT             shift and go to state 34
    Nint            reduce using rule 15 (Neg -> .)
    VAR             reduce using rule 15 (Neg -> .)
    AP              reduce using rule 15 (Neg -> .)

    Neg                            shift and go to state 33
    Conditions                     shift and go to state 58

state 47

    (16) LogicSymb -> OR .

    NOT             reduce using rule 16 (LogicSymb -> OR .)
    Nint            reduce using rule 16 (LogicSymb -> OR .)
    VAR             reduce using rule 16 (LogicSymb -> OR .)
    AP              reduce using rule 16 (LogicSymb -> OR .)


state 48

    (17) LogicSymb -> AND .

    NOT             reduce using rule 17 (LogicSymb -> AND .)
    Nint            reduce using rule 17 (LogicSymb -> AND .)
    VAR             reduce using rule 17 (LogicSymb -> AND .)
    AP              reduce using rule 17 (LogicSymb -> AND .)


state 49

    (12) Condition -> Expression OpRel . Expression
    (28) Expression -> . Values
    (29) Expression -> . Expression ADD Values
    (30) Expression -> . Expression SUB Values
    (31) Values -> . Value
    (32) Values -> . Values MUL Value
    (33) Values -> . Values DIV Value
    (34) Values -> . Values MOD Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    Nint            shift and go to state 15
    VAR             shift and go to state 23
    AP              shift and go to state 11

    Expression                     shift and go to state 59
    Values                         shift and go to state 12
    Value                          shift and go to state 14

state 50

    (18) OpRel -> GoE .

    Nint            reduce using rule 18 (OpRel -> GoE .)
    VAR             reduce using rule 18 (OpRel -> GoE .)
    AP              reduce using rule 18 (OpRel -> GoE .)


state 51

    (19) OpRel -> LoE .

    Nint            reduce using rule 19 (OpRel -> LoE .)
    VAR             reduce using rule 19 (OpRel -> LoE .)
    AP              reduce using rule 19 (OpRel -> LoE .)


state 52

    (20) OpRel -> Lower .

    Nint            reduce using rule 20 (OpRel -> Lower .)
    VAR             reduce using rule 20 (OpRel -> Lower .)
    AP              reduce using rule 20 (OpRel -> Lower .)


state 53

    (21) OpRel -> Greater .

    Nint            reduce using rule 21 (OpRel -> Greater .)
    VAR             reduce using rule 21 (OpRel -> Greater .)
    AP              reduce using rule 21 (OpRel -> Greater .)


state 54

    (22) OpRel -> IGUAL .

    Nint            reduce using rule 22 (OpRel -> IGUAL .)
    VAR             reduce using rule 22 (OpRel -> IGUAL .)
    AP              reduce using rule 22 (OpRel -> IGUAL .)


state 55

    (23) OpRel -> DIFF .

    Nint            reduce using rule 23 (OpRel -> DIFF .)
    VAR             reduce using rule 23 (OpRel -> DIFF .)
    AP              reduce using rule 23 (OpRel -> DIFF .)


state 56

    (24) Cycle -> WHILE AP Conditions FP AC . Comands FC
    (2) Comands -> . Comand Comands
    (3) Comands -> . Comand
    (4) Comand -> . Atribuition
    (5) Comand -> . Conditional
    (6) Comand -> . Expression
    (7) Comand -> . Cycle
    (25) Atribuition -> . INT VAR EQUAL Expression
    (26) Atribuition -> . VAR EQUAL Expression
    (27) Atribuition -> . INT VAR
    (8) Conditional -> . IF AP Conditions FP AC Comands FC ELSE AC Comands FC
    (9) Conditional -> . IF AP Conditions FP AC Comands FC
    (28) Expression -> . Values
    (29) Expression -> . Expression ADD Values
    (30) Expression -> . Expression SUB Values
    (24) Cycle -> . WHILE AP Conditions FP AC Comands FC
    (31) Values -> . Value
    (32) Values -> . Values MUL Value
    (33) Values -> . Values DIV Value
    (34) Values -> . Values MOD Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    INT             shift and go to state 8
    VAR             shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 13
    Nint            shift and go to state 15
    AP              shift and go to state 11

    Comands                        shift and go to state 60
    Comand                         shift and go to state 3
    Atribuition                    shift and go to state 4
    Conditional                    shift and go to state 5
    Expression                     shift and go to state 6
    Cycle                          shift and go to state 7
    Values                         shift and go to state 12
    Value                          shift and go to state 14

state 57

    (8) Conditional -> IF AP Conditions FP AC Comands . FC ELSE AC Comands FC
    (9) Conditional -> IF AP Conditions FP AC Comands . FC

    FC              shift and go to state 61


state 58

    (10) Conditions -> Neg Condition LogicSymb Conditions .

    FP              reduce using rule 10 (Conditions -> Neg Condition LogicSymb Conditions .)


state 59

    (12) Condition -> Expression OpRel Expression .
    (29) Expression -> Expression . ADD Values
    (30) Expression -> Expression . SUB Values

    OR              reduce using rule 12 (Condition -> Expression OpRel Expression .)
    AND             reduce using rule 12 (Condition -> Expression OpRel Expression .)
    FP              reduce using rule 12 (Condition -> Expression OpRel Expression .)
    ADD             shift and go to state 17
    SUB             shift and go to state 18


state 60

    (24) Cycle -> WHILE AP Conditions FP AC Comands . FC

    FC              shift and go to state 62


state 61

    (8) Conditional -> IF AP Conditions FP AC Comands FC . ELSE AC Comands FC
    (9) Conditional -> IF AP Conditions FP AC Comands FC .

    ELSE            shift and go to state 63
    INT             reduce using rule 9 (Conditional -> IF AP Conditions FP AC Comands FC .)
    VAR             reduce using rule 9 (Conditional -> IF AP Conditions FP AC Comands FC .)
    IF              reduce using rule 9 (Conditional -> IF AP Conditions FP AC Comands FC .)
    WHILE           reduce using rule 9 (Conditional -> IF AP Conditions FP AC Comands FC .)
    Nint            reduce using rule 9 (Conditional -> IF AP Conditions FP AC Comands FC .)
    AP              reduce using rule 9 (Conditional -> IF AP Conditions FP AC Comands FC .)
    $end            reduce using rule 9 (Conditional -> IF AP Conditions FP AC Comands FC .)
    FC              reduce using rule 9 (Conditional -> IF AP Conditions FP AC Comands FC .)


state 62

    (24) Cycle -> WHILE AP Conditions FP AC Comands FC .

    INT             reduce using rule 24 (Cycle -> WHILE AP Conditions FP AC Comands FC .)
    VAR             reduce using rule 24 (Cycle -> WHILE AP Conditions FP AC Comands FC .)
    IF              reduce using rule 24 (Cycle -> WHILE AP Conditions FP AC Comands FC .)
    WHILE           reduce using rule 24 (Cycle -> WHILE AP Conditions FP AC Comands FC .)
    Nint            reduce using rule 24 (Cycle -> WHILE AP Conditions FP AC Comands FC .)
    AP              reduce using rule 24 (Cycle -> WHILE AP Conditions FP AC Comands FC .)
    $end            reduce using rule 24 (Cycle -> WHILE AP Conditions FP AC Comands FC .)
    FC              reduce using rule 24 (Cycle -> WHILE AP Conditions FP AC Comands FC .)


state 63

    (8) Conditional -> IF AP Conditions FP AC Comands FC ELSE . AC Comands FC

    AC              shift and go to state 64


state 64

    (8) Conditional -> IF AP Conditions FP AC Comands FC ELSE AC . Comands FC
    (2) Comands -> . Comand Comands
    (3) Comands -> . Comand
    (4) Comand -> . Atribuition
    (5) Comand -> . Conditional
    (6) Comand -> . Expression
    (7) Comand -> . Cycle
    (25) Atribuition -> . INT VAR EQUAL Expression
    (26) Atribuition -> . VAR EQUAL Expression
    (27) Atribuition -> . INT VAR
    (8) Conditional -> . IF AP Conditions FP AC Comands FC ELSE AC Comands FC
    (9) Conditional -> . IF AP Conditions FP AC Comands FC
    (28) Expression -> . Values
    (29) Expression -> . Expression ADD Values
    (30) Expression -> . Expression SUB Values
    (24) Cycle -> . WHILE AP Conditions FP AC Comands FC
    (31) Values -> . Value
    (32) Values -> . Values MUL Value
    (33) Values -> . Values DIV Value
    (34) Values -> . Values MOD Value
    (35) Value -> . Nint
    (36) Value -> . VAR
    (37) Value -> . AP Expression FP

    INT             shift and go to state 8
    VAR             shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 13
    Nint            shift and go to state 15
    AP              shift and go to state 11

    Comands                        shift and go to state 65
    Comand                         shift and go to state 3
    Atribuition                    shift and go to state 4
    Conditional                    shift and go to state 5
    Expression                     shift and go to state 6
    Cycle                          shift and go to state 7
    Values                         shift and go to state 12
    Value                          shift and go to state 14

state 65

    (8) Conditional -> IF AP Conditions FP AC Comands FC ELSE AC Comands . FC

    FC              shift and go to state 66


state 66

    (8) Conditional -> IF AP Conditions FP AC Comands FC ELSE AC Comands FC .

    INT             reduce using rule 8 (Conditional -> IF AP Conditions FP AC Comands FC ELSE AC Comands FC .)
    VAR             reduce using rule 8 (Conditional -> IF AP Conditions FP AC Comands FC ELSE AC Comands FC .)
    IF              reduce using rule 8 (Conditional -> IF AP Conditions FP AC Comands FC ELSE AC Comands FC .)
    WHILE           reduce using rule 8 (Conditional -> IF AP Conditions FP AC Comands FC ELSE AC Comands FC .)
    Nint            reduce using rule 8 (Conditional -> IF AP Conditions FP AC Comands FC ELSE AC Comands FC .)
    AP              reduce using rule 8 (Conditional -> IF AP Conditions FP AC Comands FC ELSE AC Comands FC .)
    $end            reduce using rule 8 (Conditional -> IF AP Conditions FP AC Comands FC ELSE AC Comands FC .)
    FC              reduce using rule 8 (Conditional -> IF AP Conditions FP AC Comands FC ELSE AC Comands FC .)

