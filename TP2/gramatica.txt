Tue.17:50.05.2021
mishlawi


ficheiros .y e .l


------------------------------------------------
Description:
Definir uma Linguagem de Programação Imperativa que permita declarar:
* Variáveis dos tipos Inteiro (c/ aritmetica relacional e logica)
* Fazer as Operações de Atribuição de Expressões a Variáveis
declaradas
* Leitura stdin (de inteiros)
* Escrita stdout
* Condições e Ciclos Repetir

---------------------------------------------------------------
TOP-GENERIC

Programa -> Function
          | Expression

Function -> Header Instrucoes


Header -> TIPO NAME '(' Argumento ')'
          | TIPO NAME '(' ')'


Argumento -> TIPO ARG ',' Argumento
		   | TIPO ARG

Instrucoes -> '{' Comands '}' 
		

Comands -> Comand Comands
        | Comand

Comand -> Atribution
       | Conditional
       | Cycle

********************************************************************

TIPO DE EXECUCOES


++CONDICIONAIS
Conditional -> if '(' Conditions ')' '{' Comands '}' else '{'Comands '}'
             | if '(' Conditions ')' '{' Comands '}'

##if ((b>c) && (d<g) || h>i)


Conditions -> Neg '(' Condition ')' LogicSymb Conditions
            | Neg '(' Condition ')'   # !(a>b)|| a


Neg -> NOT          #  !
     |  $ 

LogicSymb -> OR     # ||
           | AND    # &&


Condition -> Expression OpRel Expression
		   | Expression


OpRel -> GoE     # >=
	   | LoE     # <= 
	   | Lower   # <
	   | Greater # >
	   | Equal   # ==
	   | Diff    # != 

++ATRIBUICOES

Atribuicao -> TIPO Var '=' Exp

++CICLO
CYCLE : WHILE '(' Conditions ')' '{' Comands '}'

**************************************************************************
TRIVIALIDADE

Expression -> Vals
            | Expression '+' Vals
            | Expression '-' Vals


Vals -> Nature
      | Vals '*' Nature
      | Vals '/' Nature


****************************************************************************
DEFINICOES ELEMENTARES


Fator -> Nint
		| VAR
        | '(' Expression')'


Tipo -> INT

IO -> INPUT
   | OUTPUT


OUTPUT -> PRINT Exp

INPUT -> SCAN VAR